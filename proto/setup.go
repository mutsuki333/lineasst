package main

import (
	"bytes"
	"flag"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"strings"
)

var help bool

var protobufs = map[string][]string{
	"https://raw.githubusercontent.com/googleapis/googleapis/master/google/api/annotations.proto": {"google", "api", "annotations.proto"},
}

func init() {
	flag.BoolVar(&help, "help", false, "shows the help text")

	flag.Usage = func() {
		fmt.Println(`setup.go downloads required proto files to the local include path

Usage: setup.go [OPTIONS] [INCLUDE_PATH]
	(INCLUDE_PATH defaults to "."`)
		fmt.Println()
		flag.PrintDefaults()
	}
}

func main() {
	flag.Parse()

	include := "."
	// include := "/usr/local/include"

	if help {
		flag.Usage()
		return
	}

	buf := bytes.NewBufferString(`# Code generated by setup.go. DO NOT EDIT.`)
	buf.WriteByte('\n')
	buf.WriteByte('\n')
	if include == "." {
		ignore, err := os.Create(".gitignore")
		defer func() {
			_, err = io.Copy(ignore, buf)
			ignore.Close()
			if err != nil {
				panic(err)
			}
		}()
	}

	if len(os.Args) > 1 {
		include = os.Args[1]
	}

	for src, path := range protobufs {

		base := filepath.Join(append([]string{include}, path[:len(path)-1]...)...)
		file := filepath.Join(base, path[len(path)-1])

		err := os.MkdirAll(base, os.ModePerm)
		if err != nil {
			panic(err)
		}

		// add to gitignore
		buf.WriteString(strings.Join(path, "/"))
		buf.WriteByte('\n')

		// skip if already exist
		_, exist := os.Stat(file)
		if exist == nil {
			continue
		}

		// create file
		f, err := os.Create(file)
		if err != nil {
			panic(err)
		}

		// download file
		res, err := http.Get(src)
		if err != nil {
			f.Close()
			panic(err)
		}

		// write file
		_, err = io.Copy(f, res.Body)

		res.Body.Close()
		f.Close()
		if err != nil {
			panic(err)
		}
	}
}
